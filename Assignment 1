#include <stdio.h>
#include <string.h>

void railFence(char *message, char *cipherText, int length, int A);
void railFence2(char *message, char *cipherText, int length, int A, int B, int dir);
//Main group of code which runs all the functions
//Max code length should be 8192
int main() {
    FILE *foutput;
    FILE *finput;
    //add switch function here to choose between which function to run
	char output[1024];
	char input[1024];
	//Menu system asks for input and provides selected cryption
	int menuChoice;
	printf("Please Choose a menu option:\n");
	printf("For Classic Rail Fence Encryption Press 1\n");
	printf("For 2nd Level Encryption Press 2\n");
	printf("For 2nd Level Decryption Press 3\n");
	scanf("%d",&menuChoice);
	switch(menuChoice)
	{
	    case 1:
	        foutput=fopen("encryption.txt","r");
	        railFence(input, output, 0, 4);
	        if(foutput == NULL) {
                perror("Error opening file");
                return(-1);
            }
            if( fgets (output, 1024, foutput)!=NULL ) {
                /* writing content to stdout */
                puts(output);  
            }
            fclose(foutput);
            break;
        case 2:
            foutput=fopen("encryption.txt","r");
            railFence2(input, output, 0, 5, 3, 0);
            if(foutput == NULL) {
                perror("Error opening file");
                return(-1);
            }
            if( fgets (output, 1024, foutput)!=NULL ) {
                /* writing content to stdout */
                puts(output);  
            }
            fclose(foutput);
            break;
        case 3:
            finput=fopen("plaintext.txt","r");
            railFence2(input, output, 0, 5, 3, 1);
            if(finput==NULL) {
                perror("Error opening file");
                return(-1);
            }
            if( fgets (input, 1024, finput)!=NULL ) {
                /* writing content to stdout */
                puts(input);  
            }
            fclose(finput);
            break;
        default:
            printf("Error: That is not an option");
	}
}
//Basic RailFence cypher
//Use template from assignment sheet modified to use specified functions
void railFence(char *message, char *cipherText, int length, int A) {
    FILE *foutput;
    FILE *finput;
    //Creating the message from plaintext.txt
    finput=fopen("plaintext.txt","r");
    fgets(message,1024,finput);
    fclose(finput);
	length=strlen(message);
	char grid[A][1024];
	int rail, i = 0, j = 0, counter=0;
	rail=A;
	//This Resets the grid Array to ensure no data from previous iterations
	//can corrupt the new encryption
    for(i=0;i<rail;i++)
	{
	    for(j=0;j<length;j++)
	    {
	        grid[i][j]=0;
	    }
	}
	//reset to zero to be used in new loops, since the j interger
	//was already used above
    j=0;
    while(j<length)
    {
        //This checks if the number is even or odd by seeing if it is
        //divisible by two,will be expanded to other numbers later
        if(counter%2==0)
        {
            for(i=0;i<rail;i++)
            {
                //Copies the current letter of the basic message across to other
                //cipher code, since this is a basic transposition code
                grid[i][j]=(int)message[j];
                j++;
            }
        }
        else
        {
            for(i=rail-2;i>0;i--)
            {
                grid[i][j]=(int)message[j];
                j++;
            }
        }
        counter++;
    }
    foutput = fopen ("encryption.txt", "w");
    for(i=0;i<rail;i++)
    {
        for(j=0;j<length;j++)
        {
            if(grid[i][j]!=0)
            fputc(grid[i][j],foutput);
        }
    }
    fclose(foutput);
}
//2nd level Rail cypher
//modified version of basic cypher
//Need code to limit the two levels chosen
void railFence2(char *message, char *cipherText, int length, int A, int B, int dir){
    //dir refers to either setting an encryption or decryption ie when dir ==0 it should encrypt
	FILE *foutput;
	FILE *finput;
	char grid[A][1024];
	int rail,rail2, i = 0, j = 0, counter=0;
	rail=A;
	rail2=B;
	//make sure that A>B and that B>1 so that the rails work correctly
	if(!(A>B))
	{
	    printf("Error:The Second rail cannot be larger or equal to the first");
	    return;
	}
	else if(!(B>1))
	{
	    printf("Error: The Second Rail must be greater than 1");
	    return;
	}
	//Setting it to choose either the encryption or decryption functions setup
	if(dir==0)
	{   
	    //sets up message from the plaintext and also length being used for the grid
	    finput=fopen("plaintext.txt","r");
        fgets(message,1024,finput);
        fclose(finput);
	    length=strlen(message);
	    //This Resets the grid Array to ensure no data from previous iterations
	    //can corrupt the new encryption
	    for(i=0;i<rail;i++)
	    {
	        for(j=0;j<length;j++)
	        {
	            grid[i][j]=0;
	        }
	    }
	    j=0;
        while(j<length)
        {
            //This checks if the number is even or odd by seeing if it is
            //divisible by two,will be expanded to other numbers later
            if(counter%4==0)
            {
                for(i=0;i<rail;i++)
                {
                    //Copies the current letter of the basic message across to other
                    //cipher code, since this is a basic transposition code
                    grid[i][j]=(int)message[j];
                    j++;
                }
            }
            else if(counter%4==1)
            {
                for(i=rail-2;i>=rail2;i--)
                {  
                    grid[i][j]=(int)message[j];
                    j++;
                }
                    
            }
            else if(counter%4==2)
            {
                for(i=rail2-1;i<rail;i++)
                {
                    grid[i][j]=(int)message[j];
                    j++;
                }
            }
            else
            {
                for(i=rail-2;i>0;i--)
                {
                   grid[i][j]=(int)message[j];
                   j++;
                }
            }
            counter++;
        }
        foutput = fopen("encryption.txt", "w");
        for(i=0;i<rail;i++)
        {
            for(j=0;j<length;j++)
            {
                if(grid[i][j]!=0)
                fputc(grid[i][j],foutput);
            }
        }
        fclose(foutput);

    }
    else if(dir==1)
    {
        //This a copy of the encryption from above but instead creates an empty array of 0's and 1's, in the shape
        //of a correct 2nd level rail pattern
        
        //sets up message from the encryption and also length being used for the grid
	    foutput=fopen("encryption.txt","r");
        fgets(cipherText,1024,foutput);
        fclose(foutput);
	    length=strlen(cipherText);
	    //This Resets the grid Array to ensure no data from previous iterations
	    //can corrupt the new encryption
	    for(i=0;i<rail;i++)
	    {
	        for(j=0;j<length;j++)
	        {
	            grid[i][j]=0;
	        }
	    }
	    j=0;
        while(j<length)
        {
            //This checks if the number is even or odd by seeing if it is
            //divisible by two,will be expanded to other numbers later
            if(counter%4==0)
            {
                for(i=0;i<rail;i++)
                {
                    grid[i][j]=1;
                    j++;
                }
            }
            else if(counter%4==1)
            {
                for(i=rail-2;i>=rail2;i--)
                {  
                    grid[i][j]=1;
                    j++;
                }
                    
            }
            else if(counter%4==2)
            {
                for(i=rail2-1;i<rail;i++)
                {
                    grid[i][j]=1;
                    j++;
                }
            }
            else
            {
                for(i=rail-2;i>0;i--)
                {
                   grid[i][j]=1;
                   j++;
                }
            }
            counter++;
        }
        //This code basically checks each line for a 1 and if it finds it, copyies over the encrypted version"filling the grid"
        foutput = fopen("encryption.txt", "r");
        for(i=0;i<rail;i++)
        {
            for(j=0;j<length;j++)
            {
                if(grid[i][j]==1)
                grid[i][j]=fgetc(foutput);
            }
        }
        fclose(foutput);
        //Final stage here reads the grid using previous functions to print to the file
        finput=fopen("plaintext.txt","w");
        for(j=0;j<length;j++)
        {
            for(i=0;i<rail;i++)
            {
                if(grid[i][j]!=0)
                fputc(grid[i][j],finput);
            }
        }
        fclose(finput);
    }
}
