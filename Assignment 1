#include <stdio.h>
#include <string.h>

void railFence(char *message, char *cipherText, int length, int A);
void railFence2(char *message, char *cipherText, int length, int A, int B, int dir);
//Main group of code which runs all the functions
//Max code length should be 8192
int main() {
    FILE *fp;
    fp=fopen("file.txt","r");
    //add switch function here to choose between which function to run
	char output[1024];
	//Need code to ensure all text is uppercase(Using ascii)
	//railFence("this is a test message", output, 0, 4);
	//if(fp == NULL) {
    //   perror("Error opening file");
    //   return(-1);
    //}
    //if( fgets (output, 1024, fp)!=NULL ) {
    //   /* writing content to stdout */
    //   puts(output);  
    //}
    railFence2("this is a test message", output, 0, 5, 3, 0);
    if(fp == NULL) {
       perror("Error opening file");
       return(-1);
    }
    if( fgets (output, 1024, fp)!=NULL ) {
       /* writing content to stdout */
       puts(output);  
    }
	fclose(fp);
}
//Basic RailFence cypher
//Use template from assignment sheet modified to use specified functions
void railFence(char *message, char *cipherText, int length, int A) {
    FILE *fp;
	length=strlen(message);
	char grid[A][1024];
	int rail, i = 0, j = 0, counter=0;
	rail=A;
	//This Resets the grid Array to ensure no data from previous iterations
	//can corrupt the new encryption
    for(i=0;i<rail;i++)
	{
	    for(j=0;j<length;j++)
	    {
	        grid[i][j]=0;
	    }
	}
	//reset to zero to be used in new loops, since the j interger
	//was already used above
    j=0;
    while(j<length)
    {
        //This checks if the number is even or odd by seeing if it is
        //divisible by two,will be expanded to other numbers later
        if(counter%2==0)
        {
            for(i=0;i<rail;i++)
            {
                //Copies the current letter of the basic message across to other
                //cipher code, since this is a basic transposition code
                grid[i][j]=(int)message[j];
                j++;
            }
        }
        else
        {
            for(i=rail-2;i>0;i--)
            {
                grid[i][j]=(int)message[j];
                j++;
            }
        }
        counter++;
    }
    //fp = fopen ("file.txt", "w");
    for(i=0;i<rail;i++)
    {
        for(j=0;j<length;j++)
        {
            if(grid[i][j]!=0)
            fputc(grid[i][j],fp);
        }
    }
    //fclose(fp);
}
//2nd level Rail cypher
//modified version of basic cypher
//Need code to limit the two levels chosen
void railFence2(char *message, char *cipherText, int length, int A, int B, int dir){
    //dir refers to either setting an encryption or decryption ie when dir ==0 it should encrypt
	FILE *fp;
	length=strlen(message);
	char grid[A][1024];
	int rail,rail2, i = 0, j = 0, counter=0;
	rail=A;
	rail2=B;
	//make sure that A>B and that B>1 so that the rails work correctly
	if(!(A>B))
	{
	    printf("Error:The Second rail cannot be larger or equal to the first");
	    return;
	}
	else if(!(B>1))
	{
	    printf("Error: The Second Rail must be greater than 1");
	    return;
	}
	//This Resets the grid Array to ensure no data from previous iterations
	//can corrupt the new encryption
	for(i=0;i<rail;i++)
	{
	    for(j=0;j<length;j++)
	    {
	        grid[i][j]=0;
	    }
	}
	j=0;
	//Setting it to choose either the encryption or decryption functions setup
	if(dir==0)
	{
        while(j<length)
        {
            //This checks if the number is even or odd by seeing if it is
            //divisible by two,will be expanded to other numbers later
            if(counter%4==0)
            {
                for(i=0;i<rail;i++)
                {
                    //Copies the current letter of the basic message across to other
                    //cipher code, since this is a basic transposition code
                    grid[i][j]=(int)message[j];
                    j++;
                }
            }
            else if(counter%4==1)
            {
                for(i=rail-2;i>=rail2;i--)
                {  
                    grid[i][j]=(int)message[j];
                    j++;
                }
                    
            }
            else if(counter%4==2)
            {
                for(i=rail2-1;i<rail;i++)
                {
                    grid[i][j]=(int)message[j];
                    j++;
                }
            }
            else
            {
                for(i=rail-2;i>0;i--)
                {
                   grid[i][j]=(int)message[j];
                   j++;
                }
            }
            counter++;
        }
        dir=2;
    }
    else if(dir==1)
    {
        return;
    }
    else
    {
        return;
    }
    fp = fopen("file.txt", "w");
    for(i=0;i<rail;i++)
    {
        for(j=0;j<length;j++)
        {
            if(grid[i][j]!=0)
            fputc(grid[i][j],fp);
        }
    }
    fclose(fp);

    //Decryption is basically the opposite of encryption
}
